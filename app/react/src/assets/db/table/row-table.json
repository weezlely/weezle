{
  "id": "1",
  "type": "title",
  "content": "RowTable",
  "tag": "h1",
  "paragraphs": [
    {
      "id": "test",
      "title": "start",
      "tag": "h1",
      "brief": "Getting started",
      "direction": "row",
      "contents": [
        {
          "type": "desc",
          "title": "라이브러리 설치 방법",
          "tag": "h4",
          "desc": ["How to install and set up @taeo/react-table UI in your project."],
          "md": null,
          "imgUrl": ""
        }
      ]
    },

    {
      "id": "test",
      "title": "How to use?",
      "tag": "h3",
      "brief": "How to use",
      "direction": "column",
      "contents": [
        {
          "type": "code",
          "title": "Import",
          "tag": "h4",
          "desc": ["1) Import Component and Module.", "To use tables, RowTable and TableManager are imported from the package."],
          "md": {
            "type": "javascript",
            "code": "import { RowTable, TableManager } from \"@taeopia/react-table;\""
          },
          "imgUrl": ""
        },
        {
          "type": "code",
          "title": "모듈 생성",
          "tag": "h4",
          "desc": [
            "2) Create TableManger Module",
            "The TableManager class is used to implement the table management module, which efficiently manages the structure and data of tables.",
            "In the code below, we define the default column configuration for the table by passing an array of column titles such as [\"id\", \"No.\", \"name\", \"dept\", \"phone\"]. This configuration simplifies defining columns and mapping data in tables and provides the flexibility to dynamically add or modify columns based on specific requirements.",
            "Additionally, the ExampleTable interface extends CreateTableColumns<5> to explicitly indicate type information related to the number of columns, helping to make table management more type safe."
          ],
          "md": {
            "type": "javascript",
            "code": "interface ExampleTable extends CreateTableColumns<5> {}\n\nconst exampleTable = new TableManager([\"id\", \"No.\", \"name\", \"dept\", \"phone\"]);"
          },
          "imgUrl": ""
        },
        {
          "type": "code",
          "title": "Get columns methods",
          "tag": "h4",
          "desc": ["3) Get table columns", "Table columns are retrieved through tableManger’s getColumns method."],
          "md": {
            "type": "javascript",
            "code": "const columns = useMemo(() => exampleTable.getColumns(), []);"
          },
          "imgUrl": ""
        }
      ]
    },
    {
      "id": "test",
      "title": "Code Description",
      "tag": "h3",
      "brief": "Code Description",
      "direction": "column",
      "contents": [
        {
          "type": "code",
          "title": "사용방법",
          "tag": "h4",
          "desc": [
            "",
            "The generic interface <TData, Data> flexibly handles table data types and column definition types.",
            "TData defines the data of each table column, and Data defines the array type of data to be rendered in the table.",
            "useTableOutSideClick: This hook handles detecting out-of-table clicks so you can execute a specific action. Use forwardedRef and tableRef to set up out-of-click detection, and pass the onClickOutSide function and refs to handle the action on out-of-table clicks."
          ],
          "md": {
            "type": "javascript",
            "code": "interface RowTableProps<TData, Data> extends ReturnType<typeof useTable> {\n  refs?: RefObject<HTMLElement & HTMLDivElement>[];\n  tableClass?: ClassName;\n  tableStyle?: CSSProperties;\n  columns: ColumnDef<TData, unknown>[];\n  data: Data[];\n}\n\nexport const RowTableComponent = <T, D>(\n  props: RowTableProps<T, D>,\n  forwardedRef: Ref<HTMLTableElement>\n) => {\n  const tableRef = useRef<HTMLTableElement>(null);\n  const { refs, columns, data, tableClass, tableStyle, ...tableInstance } = props;\n\n  const { caption, onClickOutSide } = tableInstance;\n\n  useTableOutSideClick((forwardedRef as RefObject<HTMLTableElement>) || tableRef, onClickOutSide, refs);\n  return (\n    <table {...{ className: tableClass, style: tableStyle }} ref={forwardedRef || tableRef} role=\"table\" aria-label=\"table\">\n      <caption className={caption?.blind ? \"blind\" : \"\"}>{caption?.text}</caption>\n      <RowTableHead {...tableInstance} />\n      <RowTableBody {...tableInstance} />\n    </table>\n  );\n};\n\nexport const RowTable = forwardRef(RowTableComponent) as <T, D>(\n  props: RowTableProps<T, D> & {\n    ref?: Ref<HTMLTableElement>;\n  }\n) => ReturnType<typeof RowTableComponent>;"
          },
          "imgUrl": ""
        }
      ]
    }
  ]
}
